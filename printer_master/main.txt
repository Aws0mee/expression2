@name Printer Master

#[ Todo:
    -Store printers in a global variable
]#

@inputs User:wirelink Freezer:wirelink EGP:wirelink

@persist  Printers:array

@persist UserTarget:entity UserEnt:entity
@persist MaintenanceState Maintenance:entity MaintenancePos:vector MaintenanceAng:angle

@persist Total StartTime

if (first() | duped()) {
    #include "printer_master/lib"
    #include "printer_master/egp"
    #include "printer_master/themes"
    #include "printer_master/language"
    #include "printer_master/config"

    Printers = array()

    StartTime = curtime()

    UserEnt = User:entity()
    UserEnt:setMass(500)
    UserTarget = noentity()

    Maintenance = noentity()
    MaintenancePos = vec()
    MaintenanceAng = ang()

    Total = 0
    MaintenanceState = 0

    EGP:setupEgp()
    
    User:setNumber("Fade", 1)

    print(format(getLanguageString("WelcomeMessage"), "V1"))
}

if (->User | ~User) {
    UserEnt = User:entity()
}

if (->EGP | ~EGP) {
    EGP:setupEgp()
}

function number compare(TargetPos:vector, TargetAng:angle) {
    return (compareVectors(TargetPos, Maintenance:pos(), Config["Margin", number]) & compareAngles(TargetAng, Maintenance:eyeAngles(), Config["AngMargin", number]))    
}

function handleMessage(Ent:entity, Message:string, N:number) {
    N=N
    
    if (Ent != owner()) { return }

    if (Message:sub(1, 1) == Config["ChatPrefix", string]) { 
        Message = Message:sub(2)
    } else { 
        return 
    }

    hideChat(1)
    local Args = Message:explode(" ")

    if (Args[1, string] == "theme") {
        initThemes()
        if (setTheme(Args[2, string])) {  #Check  if theme exists
            EGP:setupEgp()
            print(format(getLanguageString("SetThemeSuccess"), SelectedTheme))
            return
        } else { 
            print(format(getLanguageString("SetThemeError"), Args[2, string]))
            return
        }
    } elseif (Args[1, string] == "theme") {
        if (setLanguage(Args[2, string])) {  #Check  if theme exists
            EGP:setupEgp()
            print(format(getLanguageString("SetLanguageSuccess"), SelectedTheme))
            return
        } else { 
            print(format(getLanguageString("SetLanguageError"), Args[2, string]))
            return
        }
    } elseif (Args[1, string] == "add") { #Adds printer to list
        local AimEntity = owner():aimEntity()
        if (AimEntity:isValid() & AimEntity:type():find("boost_printer") & !Printers:exists(AimEntity:id())) {
            Printers[AimEntity:id(), entity] = AimEntity
            
            print(format(getLanguageString("PrinterAdded")))
        }
    } elseif (Args[1, string] == "remove") {#Removes printer from list
        local AimEntity = owner():aimEntity()
        if (AimEntity:isValid() & AimEntity:type():find("boost_printer") & Printers:exists(AimEntity:id())) {
            Printers:removeEntity(AimEntity:id())

            print(format(getLanguageString("PrinterRemoved")))
        }
    } elseif (Args[1, string] == "reset") { #Resets the chip
        reset()
    } elseif (Args[1, string] == "clear") { #clears the printers list
        Printers:clear()
    } elseif (Args[1, string] == "config") { #clears the printers list
        if (Args[2, string] == "number") {
            configNumber(Args[3, string], Args[4, string]:toNumber())
        } elseif (Args[2, string] == "string") {
            configString(Args[3, string], Args[4, string])
        }
    }
}

event chat(Ent:entity, Message:string, N:number) { # i dont fucking know what n is
    handleMessage(Ent, Message, N) # we do in a function so that we can return
}

event tick(){
    Freezer:setNumber("Activate", 0)
    local PrinterCount = 0
    
    foreach(K, PrinterEnt:entity = Printers) {
        if (!PrinterEnt:isValid()) {Printers:remove(K) continue}
        local Printer = PrinterEnt:wirelink()
        
        if (Printer:number("MoneyStored") >= Config["MaxMoney", number] & !UserTarget:isValid()) {
            Total += Printer:number("MoneyStored")
            UserTarget = PrinterEnt
        }
        
        if ((Printer:number("Battery") <= Config["MinBattery", number] | Printer:number("Coolant") <= Config["MinCooling", number]) & !Maintenance:isValid()) {
            MaintenancePos = PrinterEnt:massCenter()
            MaintenanceAng = PrinterEnt:eyeAngles()
            Maintenance = PrinterEnt
        }
        
        PrinterCount++
    }
 
    local UserTargetPos = UserTarget:massCenter()
    local UserTargetAng = UserTarget:eyeAngles()
    
    if (!UserTarget:isValid()) {
        UserTargetPos = entity():pos() + vec(0,0,15)
        UserTargetAng = entity():eyeAngles()
    } 
    
    if (compareVectors(UserTargetPos, UserEnt:pos(), Config["UserMargin", number]) & UserTarget:isValid()) {
        User:setNumber("Fire", 1)
        UserTarget = noentity()
    } else {
        User:setNumber("Fire", 0)
    }
    
    if (Maintenance:isValid()) {
        if (MaintenanceState == 0) {
            TargetPos = MaintenancePos + vec(0, 0, 25)
            TargetAng = MaintenanceAng
            
            if (compare(TargetPos, TargetAng)) {
                MaintenanceState++    
            }
        } elseif (MaintenanceState == 1) {
            TargetPos = entity():pos() + vec(0, 0, 25)
            TargetAng = entity():eyeAngles()
            
            local Flag = owner():aimEntity() == Maintenance
            if (Maintenance:wirelink():number("Battery") < Config["MaxBattery", number]) {
                if (Flag) {concmd("darkrp buybattery")}
            } elseif (Maintenance:wirelink():number("Coolant") < Config["MaxCooling", number]) {
                if (Flag) {concmd("darkrp buycoolingcell")}
            } else {
                MaintenanceState++
            }
        } elseif (MaintenanceState == 2) {
            TargetPos = MaintenancePos + vec(0, 0, 25)
            TargetAng = MaintenanceAng
            
            if (compare(TargetPos, TargetAng)) {
                MaintenanceState++
            }
        } elseif (MaintenanceState == 3) {
            TargetPos = MaintenancePos + vec(0, 0, 5)
            TargetAng = MaintenanceAng
            
            if (compare(TargetPos, TargetAng)) {
                Maintenance = noentity()
                MaintenanceState = 0
            }
        }
        Maintenance:applyForce(((TargetPos - Maintenance:pos()) * Config["Speed", number] - Maintenance:vel()) * Maintenance:mass())
        Maintenance:applyAngForce((Maintenance:toLocal(TargetAng)*Config["AngSpeed", number] - Maintenance:angVel()*(Config["AngSpeed", number]/10))*shiftL(ang(Maintenance:inertia())))
    } elseif (MaintenanceState > 0) {
        MaintenanceState = 0
    }
    
    UserEnt:applyForce(((UserTargetPos - UserEnt:pos()) * Config["UserSpeed", number] - UserEnt:vel()) * UserEnt:mass())
    UserEnt:applyAngForce((UserEnt:toLocal(UserTargetAng)* Config["UserAngSped", number] - UserEnt:angVel()*(Config["UserAngSped", number]/10))*shiftL(ang(UserEnt:inertia())))
    
    EGP:updateEgp(StartTime, Total, Config["Goal", number], PrinterCount)
}

event removed(N:number) {
    N=N
    User:setNumber("Fire", 0)
    User:setNumber("Fade", 0)
}
