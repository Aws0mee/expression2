@name Orbital Refiller

@inputs User:wirelink

@persist Entities:array Wanted:entity WantedID EntityData:table

@persist UserTarget:entity
@persist PrevTime Total

if (first() | duped()) {    
    #include "orbital_refiller/config"

    Entities = array()
    EntityData = table()
    Wanted = noentity()
    UserTarget = noentity()

    PrevTime = 0
    WantedID = 0
    Total = 0

    User:entity():setMass(500)
    holoCreate(1)
    #holoModel(1, "models/props_c17/consolebox01a.mdl")
    holoScaleUnits(1, vec(33.73, 31.86, 11.72))
    holoColor(1, vec4(0, 255, 0, 100))
}

function number array:contains(Ent:entity) {
    foreach (K:number, V:entity = This) {
        if (V == Ent) {return 1}
    }
    
    return 0
}

function number array:getIndex(Ent:entity) {
    foreach (K:number, V:entity = This) {
        if (V == Ent) {return K}
    }
    
    return 0
}

function handleMessage(Ent:entity, Message:string, N:number) {
    if (Ent != owner() | N) { return }

    if (Message:sub(1, 1) == Config["ChatPrefix", string]) { 
        Message = Message:sub(2)
    } else { 
        return 
    }

    hideChat(1)
    local Args = Message:explode(" ")

    if (Args[1, string] == "add") {
        local AimEntity = owner():aimEntity()
        if (AimEntity:isValid() & AimEntity:type():find("boost_printer") & !Entities:contains(AimEntity)) {
            AimEntity:setMass(50)
            Entities:pushEntity(AimEntity)
            
            local Data = table()
            
            Data["Angle", number] = 0
            Data["Velocity", number] = 0
            Data["CurAngle", number] = 0
            
            EntityData:pushTable(Data)
            
            print("Printer added.")
        }
    } elseif (Args[1, string] == "remove") {
        local AimEntity = owner():aimEntity()
        if (AimEntity:isValid() & AimEntity:type():find("boost_printer") & Entities:contains(AimEntity)) {
            local Index = Entities:getIndex(AimEntity)
            Entities:removeEntity(Index)
            EntityData:removeTable(Index)

            print("Printer removed.")
        }
    } elseif (Args[1, string] == "reset") {
        reset()
    } elseif (Args[1, string] == "clear") {
        Entities:clear()
        EntityData:clear()
    } elseif (Args[1, string] == "config") {
        if (Args[2, string] == "number") {
            configNumber(Args[3, string], Args[4, string]:toNumber())
        } elseif (Args[2, string] == "string") {
            configString(Args[3, string], Args[4, string])
        } elseif (Args[2, string] == "vector") {
            configVector(Args[3, string], vec(Args[4, string]:toNumber(), Args[5, string]:toNumber(), Args[6, string]:toNumber()))
        }
    }
}

event chat(E:entity, S:string, N) {
    handleMessage(E, S, N)
}
function number angleBetweenVectors(V1:vector, V2:vector) {
    return (-toDeg(atan2(comp(V2:y() - V1:y(), V2:x() - V1:x())))) - 180
}

function number compareVectors(Vec1:vector, Vec2:vector, Margin:number) {
    local X = abs(Vec1:x() - Vec2:x())
    local Y = abs(Vec1:y() - Vec2:y())
    local Z = abs(Vec1:z() - Vec2:z())
    
    return vec(X, Y, Z):length() < Margin
}

event tick() {
    if (perf(50)) {
        local UserEnt = User:entity()
        local CurTime = systime()
        local DeltaTime = (CurTime - PrevTime) * 20
        PrevTime = CurTime
        
        local Count = Entities:count()
        local AngleIncrement = 360 / Count

        local Distance = clamp(owner():pos():distance(entity():pos() + Config["OffsetPos", vector]), 0, Config["MaxRange", number])
        
        foreach(K:number, Ent:entity = Entities) {
            if (!Ent:isValid()) {Entities:remove(K)}
            
            local Link = Ent:wirelink()

            local Offset = 180

            if (Wanted:isValid() & Ent == Wanted) {
                WantedID = (Count-K) + 1 % Count
            } elseif (!Wanted:isValid()) {
                if(Link:number("Battery") < Config["MinBattery", number] | Link:number("Coolant") < Config["MinCoolant", number]) {
                    Wanted = Ent    
                }

                Offset += (CurTime * Config["RotateSpeed", number])    
            } else {
                Offset += (angleBetweenVectors(entity():pos() + Config["OffsetPos", vector], owner():pos()) - 90) + (AngleIncrement*WantedID)
            }
            
            Offset = Offset % 360
            
            EntityData[K,table]["Angle", number] = Offset
            local CurOffset = EntityData[K,table]["CurAngle", number] % 360
            
            local Velocity = EntityData[K,table]["Velocity", number]
            
            local Distance = Offset - CurOffset

            if (Distance > 180) {
                Distance = Distance - 360
            } elseif (Distance < -180) {
                Distance = Distance + 360
            }
            
            local Force = Distance * Config["Spring", number]
            
            Velocity = (Velocity + Force) * Config["Damping", number]
            
            EntityData[K,table]["CurAngle", number] = CurOffset + (Velocity*DeltaTime)
            EntityData[K,table]["Velocity", number] = Velocity
            
            local Angle = ((AngleIncrement * (K-1)) + CurOffset) + 180 % 360
            local Radius = Config["Radius", number]
            
            if (Wanted == Ent) {
                if (Distance < Radius) {
                    Radius = Distance+Config["DistanceOffset", number]
                } else {
                    Radius =  Distance-Config["DistanceOffset", number]
                }
            }
            
            local TargetPos = entity():pos() + Config["OffsetPos", vector] + vec(cos(Angle) * Radius, sin(Angle) * Radius, 0)
            local TargetAng = ang(180, Angle, 90)
            
            Ent:applyForce(((TargetPos - Ent:massCenter()) * Config["Speed", number] - Ent:vel()) * Ent:mass() * DeltaTime)
            Ent:applyAngForce((Ent:toLocal(TargetAng)* Config["AngSpeed", number] - Ent:angVel()*(Config["AngSpeed", number]/10))*shiftL(ang(Ent:inertia())) * DeltaTime)
    
            if (Link:number("MoneyStored") >= Config["MaxMoney", number] & !UserTarget:isValid()) {
                Total += Link:number("MoneyStored")
                UserTarget = Ent
            }
        }

        if (owner():aimEntity() == Wanted) {
            if (Link:number("Battery") < Config["MaxBattery", number]) { 
                concmd("darkrp buybattery")
            } elseif (Link:number("Coolant") < Config["MaxCoolant", number]) {
                concmd("darkrp buycoolingcell")
            } else {
                Wanted = noentity()
            }
        }
        
        local UserTargetPos = UserTarget:massCenter()
        
        if (!UserTarget:isValid()) {
            UserTargetPos = entity():pos() + Config["OffsetPos", vector]
        } elseif(compareVectors(UserTargetPos, UserEnt:pos(), Config["Margin", number])) {
            User:setNumber("Fire", 1)
            UserTarget = noentity()
        } else {
            User:setNumber("Fire", 0)
        }
    
        UserEnt:applyForce(((UserTargetPos - UserEnt:pos()) * Config["Speed", number] - UserEnt:vel()) * UserEnt:mass())
        UserEnt:applyAngForce((UserEnt:toLocal(ang())* Config["AngSpeed", number] - UserEnt:angVel()*(Config["AngSpeed", number]/10))*shiftL(ang(UserEnt:inertia())))
        
        local Radius = Config["Radius", number]
        local Distance = clamp(owner():pos():distance(entity():pos() + Config["OffsetPos", vector]), 0, Config["MaxRange", number])
    
        if (Distance < Radius) {
            Radius = Distance+Config["DistanceOffset", number]
        } else {
            Radius =  Distance-Config["DistanceOffset", number]
        }
    
        local HoloAng = ((angleBetweenVectors(entity():pos() + Config["OffsetPos", vector], owner():pos())) - 90) % 360
        
        local HoloPos = entity():pos() + Config["OffsetPos", vector] + vec(cos(HoloAng) * Radius, sin(HoloAng) * Radius, 0)
        
        holoPos(1, HoloPos)
        holoAng(1, ang(180, HoloAng, 90))
        
        setName(format("A: %0.2f DT: %0.2f P: %d HA: %0.2f", AngleIncrement, DeltaTime, Entities:count(), HoloAng))
    }
}


